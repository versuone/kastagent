 ---------------------------
|xpc:xql Select command help|
 ---------------------------


h (or help) <command> shows this help: an help for this commands available for the mounted processor for the currrent mode. 
help a long help for the commands available for the mounted processor for the currrent mode.
h show a short summary of the commands available  for the mounted processor for the currrent mode.
H shows a short summary of the globally available commands (for all mode, all processor).
HELP shows a long help for the globally available commands.
H (or HELP) <command> shows help for this globally available commands.


3 SELECT OPERATIONS


The select operation, selects one or more node(s) at a set of tag(s) and regarding an optional where clause.


Syntax:
-------
select O_WHAT at F_TAGS where F_ATTRS


- simple seclect

%test:/tag1>select * at tag1

                    *tun  attr2                attr1                *text
/tag1
                    I1    b                    a                    []


- The select deep search behaviour, comparing to the Repos xpath ls implementation

e.g.:
:test:/tag1>ls
/tag1> attr1:a attr2:b
tag2
tag3
tag2
tag2

:test:/tag1>%


%test:/tag1>xselect * at  tag3 # Because xql will search the whole descendant node from the current path,
							   # the tag patern do not have to be successive (tag1/tga3) like in the Repoz xpath implemenation.


e.g.:        
/tag1/tag3
    *tun:I3

        <tag3  attr3="A value with spaces !" attr1="f" attr2="g">
            aaaa1
            bbbbbbbb2
        </tag3>


e.g.:
%test:/tag1>xselect * at  tag5

/tag1/tag2/tag4/tag5
    *tun:I6

        <tag5  attr2="m" attr3="n" attr1="True">
        </tag5>



- Selecting more than one tag

e.g.:
:test:/tag1>%
%test:/tag1>xselect * at  tag3,tag2


e.g.:
/tag1/tag2
    *tun:I2

        <tag2  attr4="None" attr3="e" attr1="c" attr2="d">
        </tag2>


/tag1/tag3
    *tun:I3

        <tag3  attr3="A value with spaces !" attr1="f" attr2="g">
            aaaa1
            bbbbbbbb2
        </tag3>


/tag1/tag2
    *tun:I4

        <tag2  attr4="k" attr3="j" attr1="h" attr2="i">
            <tag4 >
                <tag5  attr2="m" attr3="n" attr1="True">
                </tag5>
            </tag4>
        </tag2>


/tag1/tag2
    *tun:I7

        <tag2  attr4="None" attr3="None" attr1="o" attr2="p">
        </tag2>

                
- Straightly jumping to a tag unique name (*tun)

As you can see, the symbol *tun show that each node has a tag unique name,
this is the unique identifier of the node througth the xml file.

e.g.:
%test:/tag1>select * at *tun=I7

                    *tun  attr4                attr2                attr3                attr1
/tag1/tag2
                    I7    None                 p                    None                 o


e.g.:                
%test:/tag1>select * at tag3,*tun=I7

                    *tun  attr2                attr3                attr1                *text
/tag1/tag3
                    I3    g                    A value with spaces ! f                    [aaaa1,bbbbbbbb2]

                    *tun  attr4                attr2                attr3                attr1                *text
/tag1/tag2
                    I7    None                 p                    None                 o                    []

%test:/tag1>


- Selecting a set of attributes

e.g.:
%test:/tag1>select attr1,attr3 at tag2
                    *tun  attr1                attr3                *text
/tag1/tag2
                    I2    c                    e                    []
/tag1/tag2
                    I4    h                    j                    []
/tag1/tag2
                    I7    o                    None                 []


- Selecting using the where close

e.g.:
%test:/tag1>select * at tag2

                    *tun  attr4                attr2                attr3                attr1
/tag1/tag2
                    I2    None                 d                    e                    c

                    *tun  attr4                attr2                attr3                attr1
/tag1/tag2
                    I4    k                    i                    j                    h

                    *tun  attr4                attr2                attr3                attr1
/tag1/tag2
                    I7    None                 p                    None                 o


%test:/tag1>
%test:/tag1>select * at tag2 where attr2=i

                    *tun  attr4                attr2                attr3                attr1
/tag1/tag2
                    I4    k                    i                    j                    h

                    
- Selecting using the where close in conjunction with Hierarchical Attributes (aka Hierarchical where clause)

e.g.:
%test:/tag1>select * at tag2,tag3 where attr2=i or attr2=g           

A where clause is processed in two steps:
	_ 1st step : The set of nodes matching the "at" clause is retreived (e.g.: at tag2,tag3).
	_ 2nd step : This set of nodes is check again upon the "where" clause conditions (e.g.: where attr2=i or attr2=g).
	
When the Attributes of the where clause are not Hierarchical all the nodes found in the first step
are checked for the requested attributes.
                    
e.g.:
%test:/tag1>select * at tag2,tag3 where attr2=i or attr2=g

                    *tun  attr2                attr3                attr1                *text
/tag1/tag3
                    I3    g                    A value with spaces ! f                    [aaaa1,bbbbbbbb2]

                    *tun  attr4                attr2                attr3                attr1                *text
/tag1/tag2
                    I4    k                    i                    j                    h                    []

%test:/tag1>

In this selection the nodes tag3 and tag2 are retreived because both have an Attribute named attr2
statisfying the where condition.


Now using Hierarchical Attributes will allow to accept from the first extrsoftclass,
only the nodes who match one or more ancestors defined by the Hierarchical Attributes.

e.g.:
%test:/tag1>select * at tag5 where tag2@attr2=i

                    *tun  attr2                attr3                attr1                *text
/tag1/tag2/tag4/tag5
                    I6    m                    n                    True                 []

%test:/tag1>

Here the tag5 node found for the "at" clause is accepted because it has an ancestor:tag2,
(actually its grand father: tag2/tag4/tag5) and this ancestor'Attribute attr2 satisfies the request (=i).


Just for information this is the content under tag1:

%test:/tag1>xselect * at tag1

/tag1
    *tun:I1

        <tag1  attr2="b" attr1="a">
            <tag2  attr2="d" attr3="e" attr1="c">
            </tag2>
            <tag3  attr3="A value with spaces !" attr1="f" attr2="g">
                aaaa1
                bbbbbbbb2
            </tag3>
            <tag2  attr4="k" attr3="j" attr1="h" attr2="i">
                <tag4 >
                    <tag5  attr2="m" attr3="n" attr1="True">
                    </tag5>
                </tag4>
            </tag2>
            <tag2  attr4="None" attr3="None" attr1="o" attr2="p">
            </tag2>
        </tag1>


%test:/tag1>


- Selecting using complex multiple where closes

%test:/tag1>select * at tag2

                    *tun  attr4                attr2                attr3                attr1                *text
/tag1/tag2
                    I2    None                 d                    e                    c                    []

                    *tun  attr4                attr2                attr3                attr1                *text
/tag1/tag2
                    I4    k                    i                    j                    h                    []

                    *tun  attr4                attr2                attr3                attr1                *text
/tag1/tag2
                    I7    None                 p                    None                 o                    []



%test:/tag1>select * at tag2 where attr2=i or attr2=p

                    *tun  attr4                attr2                attr3                attr1                *text
/tag1/tag2
                    I4    k                    i                    j                    h                    []

                    *tun  attr4                attr2                attr3                attr1                *text
/tag1/tag2
                    I7    None                 p                    None                 o                    []


%test:/tag1>select * at tag2 where (attr2=i or attr2=p) and attr1=o

                    *tun  attr4                attr2                attr3                attr1                *text
/tag1/tag2
                    I7    None                 p                    None                 o                    []


%test:/tag1>select * at tag2 where ((attr2=i or attr2=p) and attr1=o) and attr4=None

                    *tun  attr4                attr2                attr3                attr1                *text
/tag1/tag2
                    I7    None                 p                    None                 o                    []


As you can see there is no limit to parenthesis imbrication.


- Selecting using complex where close with other operators than "="

e.g.:
%test:/tag1>select * at tag2 where attr2 > i  # Using > operator

                    *tun  attr4                attr2                attr3                attr1                *text
/tag1/tag2
                    I7    None                 p                    None                 o                    []

                    
e.g.:
%test:/tag1>select * at tag2 where attr2 >= i # Using >= operator

                    *tun  attr4                attr2                attr3                attr1                *text
/tag1/tag2
                    I4    k                    i                    j                    h                    []

                    *tun  attr4                attr2                attr3                attr1                *text
/tag1/tag2
                    I7    None                 p                    None                 o                    []


e.g.:
%test:/tag1>select * at tag2 where attr2 <> i # Using <> operator

                    *tun  attr4                attr2                attr3                attr1
/tag1/tag2
                    I2    None                 d                    e                    c

                    *tun  attr4                attr2                attr3                attr1
/tag1/tag2
                    I7    None                 p                    None                 o


e.g.:
%test:/tag1>select * at tag2 where attr2 *in [i,p] # Using *in operator

                    *tun  attr4                attr2                attr3                attr1                *text
/tag1/tag2
                    I4    k                    i                    j                    h                    []

                    *tun  attr4                attr2                attr3                attr1                *text
/tag1/tag2
                    I7    None                 p                    None                 o                    []


e.g.:
%test:/tag1>select * at tag2 where attr2 *between [i,p] # Using *between operator

                    *tun  attr4                attr2                attr3                attr1                *text
/tag1/tag2
                    I4    k                    i                    j                    h                    []

                    *tun  attr4                attr2                attr3                attr1                *text
/tag1/tag2
                    I7    None                 p                    None                 o                    []

%test:/tag1>


- Selecting a guiven count of nodes

e.g.:
%test:/tag1>select * at tag2

                    *tun  attr4                attr2                attr3                attr1
/tag1/tag2
                    I2    None                 d                    e                    c

                    *tun  attr4                attr2                attr3                attr1
/tag1/tag2
                    I4    k                    i                    j                    h

                    *tun  attr4                attr2                attr3                attr1
/tag1/tag2
                    I7    None                 p                    None                 o


e.g.:
%test:/tag1>select * at tag2[1]

                    *tun  attr4                attr2                attr3                attr1
/tag1/tag2
                    I2    None                 d                    e                    c


e.g.:
%test:/tag1>select * at tag2[2]

                    *tun  attr4                attr2                attr3                attr1
/tag1/tag2
                    I2    None                 d                    e                    c

                    *tun  attr4                attr2                attr3                attr1
/tag1/tag2
                    I4    k                    i                    j                    h

%test:/tag1>
